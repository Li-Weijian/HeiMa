<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<!--配置表与实体对象的关系-->
<hibernate-mapping package="com.liweijian.domain">
    <class name="User" table="sys_user">
        <id name="user_id" >
            <!--主键生成策略-->
            <generator class="native"></generator>
        </id>
        <property name="user_code" />
        <property name="user_name" />
        <property name="user_password" />
        <property name="user_state" />

        <!-- 多对多关系表达 -->
        <!--
            name: 集合属性名
            table: 配置中间表名
            key
             |-column:外键,别人引用"我"的外键列名
             class: 我与哪个类是多对多关系
             column:外键.我引用比人的外键列名
         -->
        <!-- cascade级联操作:
                    save-update: 级联保存更新
                    delete:级联删除
                    all:级联保存更新+级联删除
            结论: cascade简化代码书写.该属性使不使用无所谓. 建议要用只用save-update.
                 如果使用delete操作太过危险.尤其在多对多中.不建议使用.
                     -->
        <!-- 使用inverse属性
			true: 放弃维护外键关系
			false(默认值):维护关系

		结论: 将来在开发中,如果遇到多对多关系.一定要选择一方放弃维护关系.
			 一般谁来放弃要看业务方向. 例如录入员工时,需要为员工指定所属角色.
			 那么业务方向就是由员工维护角色. 角色不需要维护与员工关系.角色放弃维护
		 -->
       <!-- <set name="roles" table="sys_user_role">
            <key column="user_id"></key>
            <many-to-many class="Role" column="role_id"/>
        </set>-->

    </class>
</hibernate-mapping>